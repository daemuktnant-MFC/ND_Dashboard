import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import io
import requests
import base64

# --- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (Page Config) ---
st.set_page_config(layout="wide")

# --- ‚úÖ ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ---
col1, col2 = st.columns([1, 10])

with col1:
    st.image("https://raw.githubusercontent.com/daemuktnant-MFC/streamlit-assets/main/Driver_pic.png", width=110)

with col2:
    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å st.title ‡πÄ‡∏õ‡πá‡∏ô st.header ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á
    # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ st.markdown("<h1 style='margin-top: 0;'>MFC SD Monitoring Dashboard</h1>", unsafe_allow_html=True)
    # ‡πÅ‡∏ï‡πà st.header ‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    st.header("MFC ND Monitoring Dashboard")

# -----------------------------------------------------------------
# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ---
# -----------------------------------------------------------------
@st.cache_data(show_spinner=False)
def get_base64_image(img_source): 
    data = None
    image_format = "png"
    
    # Check if the image source is a GitHub raw content URL
    if "github.com" in img_source and "blob" in img_source:
        img_source = img_source.replace("github.com", "raw.githubusercontent.com").replace("/blob/", "/")

    if img_source.startswith("http"):
        try:
            response = requests.get(img_source, timeout=10, verify=False) 
            response.raise_for_status()
            data = response.content
            format_ext = img_source.split('.')[-1].lower()
            if format_ext in ['png', 'jpg', 'jpeg', 'gif']:
                 image_format = format_ext.replace('jpg', 'jpeg')
        except requests.exceptions.RequestException as e:
            st.warning(f"Error downloading image from URL: {img_source}\n{e}")
            return None
    elif img_source:
        try:
            data = base64.b64decode(img_source)
        except Exception:
            st.warning("Invalid base64 image data.")
            return None
    
    if data:
        return f"data:image/{image_format};base64,{base64.b64encode(data).decode()}"
    return None

@st.cache_data(show_spinner=False)
def load_image_from_source(img_source):
    if img_source and (img_source.startswith("http") or len(img_source) > 100):
        return get_base64_image(img_source)
    return None

# URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô Raw Content Link ‡∏Ç‡∏≠‡∏á GitHub)
ROBOT_IMAGE_URL = "https://raw.githubusercontent.com/daemuktnant-MFC/streamlit-assets/main/Robot_ND.png"

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel ---
@st.cache_data
def load_data(uploaded_file):
    try:
        df = pd.read_excel(uploaded_file, engine='openpyxl', sheet_name='OrderReport')
        return df
    except ValueError as e:
        if "Worksheet named 'OrderReport' not found" in str(e):
            st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏µ‡∏ï 'OrderReport' ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î")
        else:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
        return None
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        return None

# --- Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå ---
st.sidebar.header("Upload File")
uploaded_file = st.sidebar.file_uploader(
    "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå 'ND update' (.xlsx, .xls)", 
    type=["xlsx", "xls"]
)

# --- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ---
if uploaded_file is not None:
    
    df = load_data(uploaded_file)

    if df is not None:
        
        # --- 1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å) ---
        COL_SLOT_TIME = 'Slot Time'
        COL_ORDER_TYPE = 'OD Type'
        COL_STATUS = 'Status'
        COL_VALUE = 'Order Value'
        COL_DRIVER = 'Driver'

        REQUIRED_COLS = [COL_SLOT_TIME, COL_ORDER_TYPE, COL_STATUS, COL_VALUE, COL_DRIVER]
        missing_cols = [col for col in REQUIRED_COLS if col not in df.columns]
        
        if missing_cols:
            st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {', '.join(missing_cols)}")
            st.warning(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ Header ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î (‡πÄ‡∏ä‡πà‡∏ô '{COL_ORDER_TYPE}', '{COL_STATUS}' ‡∏Ø‡∏•‡∏Ø)")
            st.stop()


        # --- 2. ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Dashboard ---
        header_cols = st.columns([3, 1])
        with header_cols[0]:
            st.title("üöö ND Monitoring Dashboard")
        #with header_cols[1]:‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° Column


        # --- 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì KPIs ---
        df_filtered = df[df[COL_ORDER_TYPE] != 'Cancelled'].copy()

        total_orders = len(df)
        total_value = df[COL_VALUE].sum()
        total_drivers = df[COL_DRIVER].nunique()
        total_cancelled = df[df[COL_ORDER_TYPE] == 'Cancelled'].shape[0]

        valid_orders = len(df_filtered)
        delay_count = df_filtered[df_filtered[COL_STATUS] == 'Delay'].shape[0]
        
        if valid_orders > 0:
            dot_percentage = (delay_count / valid_orders) * 100
        else:
            dot_percentage = 0

        # --- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• KPIs (5 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå) ---
        kpi1, kpi2, kpi3, kpi4, kpi5, kpi6 = st.columns(6)
        kpi1.metric("**Total Order**", f"{total_orders:,}")
        kpi2.metric("**DOT (%)**", f"{dot_percentage:.2f}%")
        kpi3.metric("**Total Cancelled**", f"{total_cancelled:,}")
        kpi4.metric("**Total Driver**", f"{total_drivers:,}")
        total_value_rounded = round(total_value)
        kpi5.metric("**Total Value**", f"{total_value_rounded:,.0f}") # ‡πÄ‡∏û‡∏¥‡πà‡∏° .2f ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
        robot_image = load_image_from_source(ROBOT_IMAGE_URL)
        if robot_image:
            with kpi6:
                st.markdown(
                    f"""
                    <div style="text-align: right; margin-top: -10px;">
                        <img src="{robot_image}" style="max-width: 250px; border-radius: 20px;">
                    </div>
                    """,
                    unsafe_allow_html=True
                )

        st.markdown("---")

        # -----------------------------------------------------------------
        # --- 4. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ñ‡∏ß‡∏Å‡∏•‡∏≤‡∏á (DOT ‡πÅ‡∏•‡∏∞ Total Order by Rider) ---
        # -----------------------------------------------------------------
        
        chart_col1, chart_col2 = st.columns(2)

        with chart_col1:
            st.subheader("DOT Status (Excluding Cancelled)")
            
            status_counts = df_filtered[COL_STATUS].value_counts().reset_index()
            status_counts.columns = ['Status', 'Count']
            
            color_lookup = {
                'Delay': '#FF0000', 
                'On time': '#0099FF',
                'Ontime': '#0099FF'
            } # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            colors = [color_lookup.get(s, '#A9A9A9') for s in status_counts['Status']] # Use grey for any unknown status
            
            fig_dot = go.Figure(data=[go.Pie(
                labels=status_counts['Status'],
                values=status_counts['Count'],
                hole=0.4,
                marker=dict(colors=colors), # Manually setting the colors
                textinfo='percent',
                textposition='inside'
            )])
            
             # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "‡∏´‡∏°‡∏∏‡∏ô" Pie Chart
            fig_dot.update_layout(
                showlegend=True,
                uniformtext_minsize=10,
                uniformtext_mode='hide',
                piecolorway=colors,
                legend_title_text="DOT Status",
                # ‡∏°‡∏∏‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏≠‡∏á‡∏®‡∏≤) - 0 ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏ö‡∏ô‡∏™‡∏∏‡∏î
                # ‡∏´‡∏°‡∏∏‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏ô‡∏≤‡∏¨‡∏¥‡∏Å‡∏≤
                title="DOT Status Pie Chart",
                annotations=[dict(text='DOT', x=0.5, y=0.5, font_size=20, showarrow=False)],
            )
            fig_dot.update_traces(rotation=270)  # ‚úÖ ‡∏´‡∏°‡∏∏‡∏ô Pie 270 ‡∏≠‡∏á‡∏®‡∏≤ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô 0, 45, 180)
            st.plotly_chart(fig_dot, use_container_width=True)

        with chart_col2:
            st.subheader("Total Order by Driver (Stacked by Slot Time)")
            
            rider_counts = df_filtered.groupby([COL_DRIVER, COL_SLOT_TIME]).size().reset_index(name='Count')
            driver_totals = rider_counts.groupby(COL_DRIVER)['Count'].sum().reset_index()
            rider_counts = rider_counts.merge(driver_totals, on=COL_DRIVER, suffixes=('', '_Total'))
            
            top_15_drivers = driver_totals.nlargest(15, 'Count')[COL_DRIVER]
            rider_counts_top_15 = rider_counts[rider_counts[COL_DRIVER].isin(top_15_drivers)]

            # üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ Slot Time ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            slot_colors = {
                'Slot ‡πÄ‡∏ä‡πâ‡∏≤': '#4FC3F7',
                'Slot ‡∏ö‡πà‡∏≤‡∏¢': '#FFD54F',
                'Slot ‡πÄ‡∏¢‡πá‡∏ô': '#FF7043',
            }
            # üîπ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á Slot Time (‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤)
            slot_order = ['Slot ‡πÄ‡∏ä‡πâ‡∏≤', 'Slot ‡∏ö‡πà‡∏≤‡∏¢', 'Slot ‡πÄ‡∏¢‡πá‡∏ô']

            fig_rider = px.bar(
                rider_counts_top_15, 
                y=COL_DRIVER,
                x='Count',
                color=COL_SLOT_TIME,
                orientation='h',
                text='Count',
                title="Top 15 Drivers by Order Count (Excl. Cancelled)",
                color_discrete_map=slot_colors,  # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÄ‡∏≠‡∏á
                category_orders={COL_SLOT_TIME: slot_order}  # ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö Stack ‡∏™‡∏µ
            )
            
            fig_rider.update_layout(
                yaxis={'categoryorder':'total ascending'},
                xaxis_title="Number of Orders",
                yaxis_title="Driver"
            )
            st.plotly_chart(fig_rider, use_container_width=True)

        st.markdown("---")

        # -----------------------------------------------------------------
        # --- 5. ‡∏Å‡∏£‡∏≤‡∏ü Status Order by Driver (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ç‡∏≠) ---
        # -----------------------------------------------------------------
        st.subheader("Order Status by Driver (Excluding Cancelled)")

        df_driver_status = df_filtered.groupby([COL_DRIVER, COL_STATUS]).size().reset_index(name='Count')
        df_driver_total = df_driver_status.groupby(COL_DRIVER)['Count'].sum().reset_index(name='TotalCount')
        
        all_drivers = df_driver_total[COL_DRIVER].unique()
        all_statuses = df_driver_status[COL_STATUS].unique()

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Status
        status_colors = {
            'Delay': '#FF0000',       # ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Delay
            'On time': '#0099FF',    # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö On time
            'Pending': '#92D050',  # ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° Status ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        }
        # ‡πÉ‡∏ä‡πâ‡∏™‡∏µ default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡∏´‡∏ô‡∏î
        for status in all_statuses:
            if status not in status_colors:
                status_colors[status] = px.colors.qualitative.Plotly[len(status_colors) % len(px.colors.qualitative.Plotly)]


        fig_driver_status = make_subplots(specs=[[{"secondary_y": True}]])

        # 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á (Stacked Bar)
        for status in all_statuses:
            df_bar = df_driver_status[df_driver_status[COL_STATUS] == status]
            df_bar_full = pd.DataFrame({COL_DRIVER: all_drivers}).merge(df_bar, on=COL_DRIVER, how='left').fillna(0)
            
            fig_driver_status.add_trace(go.Bar(
                x=df_bar_full[COL_DRIVER], 
                y=df_bar_full['Count'], 
                name=status, 
                text=df_bar_full['Count'].apply(lambda x: int(x) if x > 0 else ''),
                textposition='inside',
                marker_color=status_colors.get(status) # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏° status_colors
            ), secondary_y=False)

        # 2. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏£‡∏≤‡∏ü (Total) - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô Smooth ‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡πÅ‡∏î‡∏á
        fig_driver_status.add_trace(go.Scatter(
            x=df_driver_total[COL_DRIVER], 
            y=df_driver_total['TotalCount'], 
            name="Total", 
            mode='lines+markers', # ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô
            text=df_driver_total['TotalCount'],
            textposition='top center',
            line=dict(color='#FFCC66', width=4, shape='spline'), # ‡πÄ‡∏™‡πâ‡∏ô smooth
            marker=dict(color='#00B0F0', size=4) # ‡∏à‡∏∏‡∏î‡∏™‡∏µ‡πÅ‡∏î‡∏á
        ), secondary_y=True)

        # 3. ‡∏õ‡∏£‡∏±‡∏ö Layout
        max_y_bar = df_driver_total['TotalCount'].max() * 1.5
        max_y_line = df_driver_total['TotalCount'].max() * 1.3
        
        fig_driver_status.update_layout(
            barmode='stack',
            xaxis_title="Driver",
            legend_title="Status",
            height=500,
            hovermode="x unified" # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ Hover ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ß‡∏°
        )
        
        fig_driver_status.update_yaxes(
            title_text="Number of Orders", 
            secondary_y=False,
            range=[0, max_y_bar]
        )
        
        fig_driver_status.update_yaxes(
            title_text="Total Orders", 
            secondary_y=True,
            showgrid=False,
            range=[0, max_y_line]
        )
        
        st.plotly_chart(fig_driver_status, use_container_width=True)


        # --- (‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å) ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö ---
        with st.expander("‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (Raw Data)"):
            st.dataframe(df)

else:

    st.info("üëã ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå 'ND update' ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà Sidebar ‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
